"""
This type stub file was generated by pyright.
"""

from .built_in import equal as equal_matcher

"""
Introduction
------------

*Expects* can be `extended` by defining `new matchers`.
The :mod:`matchers` module contains the bases for building
custom matchers.

Tutorial
--------

The easiest way to define a new matcher is to extend the
:class:`Matcher` class and override the :func:`Matcher._match`
method.

For example, to define a matcher to check if a `request` object contains
a given header takes <10 lines of code::

    from expects.matchers import Matcher

    class have_header(Matcher):
        def __init__(self, expected):
            self._expected = expected

        def _match(self, request):
            if self._expected in request.headers:
                return True, ['header found']
            return True, ['header not found']

An then you only need to import the new defined matcher and write
your expectation::

    from expects import expect
    from my_custom_matchers import have_header

    expect(my_request).to(have_header('Content-Type'))

Advanced
--------

For more complex matchers you can override the :class:`Matcher`
methods in order to achieve the needed behavior.

"""
class Matcher(object):
    """The :class:`Matcher` class is the base class for all `Expects`
    matchers.

    It defines a set of methods to ease writting new matchers.

    """
    def __repr__(self):
        """Returns a string with the description of the matcher.

        By default returns a string with the following format::

            '{name} {expected}'

        Where `name` is based on the matcher class name and `expected`
        is the value passed to the constructor.

        :rtype: a string

        """
        ...
    
    def __and__(self, other):
        ...
    
    def __or__(self, other):
        ...
    


def default_matcher(value):
    ...

class _And(Matcher):
    def __init__(self, op1, op2) -> None:
        ...
    
    def __repr__(self):
        ...
    


class _Or(Matcher):
    def __init__(self, op1, op2) -> None:
        ...
    
    def __repr__(self):
        ...
    


