"""
This type stub file was generated by pyright.
"""

"""The :mod:`testing` module provides helpers to ease the testing
of your `custom matchers <custom-matchers.html>`_.

"""

class _Failure(object):
    """The :class:`failure` context manager can be used to build
    assertions of your expectation failures. It tests that the
    code inside the context manager raises an :class:`AssertionError`
    and matches the given message (whether any has been specified).

    :param message: should match the failure message. If a string is
                    passed, the :class:`end_with` matcher will be used
                    by default.

    :type message: an :class:`expects.matchers.Matcher` or string

    :raises:  :class:`AssertionError` when no *AssertionError* was
              raised, the failure message didn't match or another
              exception raised.

    .. note::

        The :class:`failure` context manager can be used without being
        *called* (for example, if you don't want to specify a *failure message*).

    Examples:

    .. code-block:: python

        >>> with failure:
        ...     expect(object()).to(have_property('foo'))

    .. code-block:: python

        >>> with failure("to have property 'foo'"):
        ...     expect(object()).to(have_property('foo'))

    .. code-block:: python

        >>> with failure(end_with("have property 'foo'")):
        ...     expect(object()).to(have_property('foo'))

    .. code-block:: python

        >>> with failure("to have property '__class__'"):
        ...     expect(object()).to(have_property('__class__'))
        Traceback (most recent call last):
          File "<stdin>", line 2, in <module>
          File "expects/testing.py", line 40, in __exit__
            raise AssertionError('Expected AssertionError to be raised')
        AssertionError: Expected AssertionError to be raised

    """

    def __init__(self, message=...) -> None: ...
    def __call__(self, message): ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_value, exc_tb): ...

failure = _Failure()
