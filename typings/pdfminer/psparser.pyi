"""
This type stub file was generated by pyright.
"""

import logging
import re

log = logging.getLogger(__name__)
class PSException(Exception):
    ...


class PSEOF(PSException):
    ...


class PSSyntaxError(PSException):
    ...


class PSTypeError(PSException):
    ...


class PSValueError(PSException):
    ...


class PSObject:
    """Base class for all PS or PDF-related data types."""
    ...


class PSLiteral(PSObject):
    """A class that represents a PostScript literal.

    Postscript literals are used as identifiers, such as
    variable names, property names and dictionary keys.
    Literals are case sensitive and denoted by a preceding
    slash sign (e.g. "/Name")

    Note: Do not create an instance of PSLiteral directly.
    Always use PSLiteralTable.intern().
    """
    def __init__(self, name) -> None:
        ...
    
    def __repr__(self):
        ...
    


class PSKeyword(PSObject):
    """A class that represents a PostScript keyword.

    PostScript keywords are a dozen of predefined words.
    Commands and directives in PostScript are expressed by keywords.
    They are also used to denote the content boundaries.

    Note: Do not create an instance of PSKeyword directly.
    Always use PSKeywordTable.intern().
    """
    def __init__(self, name) -> None:
        ...
    
    def __repr__(self):
        ...
    


class PSSymbolTable:
    """A utility class for storing PSLiteral/PSKeyword objects.

    Interned objects can be checked its identity with "is" operator.
    """
    def __init__(self, klass) -> None:
        ...
    
    def intern(self, name):
        ...
    


PSLiteralTable = PSSymbolTable(PSLiteral)
PSKeywordTable = PSSymbolTable(PSKeyword)
LIT = PSLiteralTable.intern
KWD = PSKeywordTable.intern
KEYWORD_PROC_BEGIN = KWD(b'{')
KEYWORD_PROC_END = KWD(b'}')
KEYWORD_ARRAY_BEGIN = KWD(b'[')
KEYWORD_ARRAY_END = KWD(b']')
KEYWORD_DICT_BEGIN = KWD(b'<<')
KEYWORD_DICT_END = KWD(b'>>')
def literal_name(x):
    ...

def keyword_name(x):
    ...

EOL = re.compile(rb'[\r\n]')
SPC = re.compile(rb'\s')
NONSPC = re.compile(rb'\S')
HEX = re.compile(rb'[0-9a-fA-F]')
END_LITERAL = re.compile(rb'[#/%\[\]()<>{}\s]')
END_HEX_STRING = re.compile(rb'[^\s0-9a-fA-F]')
HEX_PAIR = re.compile(rb'[0-9a-fA-F]{2}|.')
END_NUMBER = re.compile(rb'[^0-9]')
END_KEYWORD = re.compile(rb'[#/%\[\]()<>{}\s]')
END_STRING = re.compile(rb'[()\134]')
OCT_STRING = re.compile(rb'[0-7]')
ESC_STRING = { b'b': 8,b't': 9,b'n': 10,b'f': 12,b'r': 13,b'(': 40,b')': 41,b'\\': 92 }
class PSBaseParser:
    """Most basic PostScript parser that performs only tokenization.
    """
    BUFSIZ = ...
    def __init__(self, fp) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def flush(self):
        ...
    
    def close(self):
        ...
    
    def tell(self):
        ...
    
    def poll(self, pos=..., n=...):
        ...
    
    def seek(self, pos):
        """Seeks the parser to the given position.
        """
        ...
    
    def fillbuf(self):
        ...
    
    def nextline(self):
        """Fetches a next line that ends either with \\r or \\n.
        """
        ...
    
    def revreadlines(self):
        """Fetches a next line backword.

        This is used to locate the trailers at the end of a file.
        """
        ...
    
    def nexttoken(self):
        ...
    


class PSStackParser(PSBaseParser):
    def __init__(self, fp) -> None:
        ...
    
    def reset(self):
        ...
    
    def seek(self, pos):
        ...
    
    def push(self, *objs):
        ...
    
    def pop(self, n):
        ...
    
    def popall(self):
        ...
    
    def add_results(self, *objs):
        ...
    
    def start_type(self, pos, type):
        ...
    
    def end_type(self, type):
        ...
    
    def do_keyword(self, pos, token):
        ...
    
    def nextobject(self):
        """Yields a list of objects.

        Arrays and dictionaries are represented as Python lists and
        dictionaries.

        :return: keywords, literals, strings, numbers, arrays and dictionaries.
        """
        ...
    


