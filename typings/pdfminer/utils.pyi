"""
This type stub file was generated by pyright.
"""

"""
Miscellaneous Routines.
"""
INF = 1 << 31 - 1

class open_filename(object):
    """
    Context manager that allows opening a filename
    (str or pathlib.PurePath type is supported) and closes it on exit,
    (just like `open`), but does nothing for file-like objects.
    """

    def __init__(self, filename, *args, **kwargs) -> None: ...
    def __enter__(self): ...
    def __exit__(self, exc_type, exc_val, exc_tb): ...

def make_compat_bytes(in_str):
    "Converts to bytes, encoding to unicode."
    ...

def make_compat_str(in_str):
    """Converts to string, guessing encoding."""
    ...

def shorten_str(s, size): ...
def compatible_encode_method(bytesorstring, encoding=..., erraction=...):
    """When Py2 str.encode is called, it often means bytes.encode in Py3.

    This does either.
    """
    ...

def apply_png_predictor(pred, colors, columns, bitspercomponent, data): ...

MATRIX_IDENTITY = (1, 0, 0, 1, 0, 0)

def mult_matrix(m1, m0): ...
def translate_matrix(m, v):
    """Translates a matrix by (x, y)."""
    ...

def apply_matrix_pt(m, v): ...
def apply_matrix_norm(m, v):
    """Equivalent to apply_matrix_pt(M, (p,q)) - apply_matrix_pt(M, (0,0))"""
    ...

def isnumber(x): ...
def uniq(objs):
    """Eliminates duplicated elements."""
    ...

def fsplit(pred, objs):
    """Split a list into two classes according to the predicate."""
    ...

def drange(v0, v1, d):
    """Returns a discrete range."""
    ...

def get_bound(pts):
    """Compute a minimal rectangle that covers all the points."""
    ...

def pick(seq, func, maxobj=...):
    """Picks the object obj where func(obj) has the highest value."""
    ...

def choplist(n, seq):
    """Groups every n elements of the list."""
    ...

def nunpack(s, default=...):
    """Unpacks 1 to 4 or 8 byte integers (big endian)."""
    ...

PDFDocEncoding = "".join(
    chr(x)
    for x in (
        0,
        1,
        2,
        3,
        4,
        5,
        6,
        7,
        8,
        9,
        10,
        11,
        12,
        13,
        14,
        15,
        16,
        17,
        18,
        19,
        20,
        21,
        23,
        23,
        728,
        711,
        710,
        729,
        733,
        731,
        730,
        732,
        32,
        33,
        34,
        35,
        36,
        37,
        38,
        39,
        40,
        41,
        42,
        43,
        44,
        45,
        46,
        47,
        48,
        49,
        50,
        51,
        52,
        53,
        54,
        55,
        56,
        57,
        58,
        59,
        60,
        61,
        62,
        63,
        64,
        65,
        66,
        67,
        68,
        69,
        70,
        71,
        72,
        73,
        74,
        75,
        76,
        77,
        78,
        79,
        80,
        81,
        82,
        83,
        84,
        85,
        86,
        87,
        88,
        89,
        90,
        91,
        92,
        93,
        94,
        95,
        96,
        97,
        98,
        99,
        100,
        101,
        102,
        103,
        104,
        105,
        106,
        107,
        108,
        109,
        110,
        111,
        112,
        113,
        114,
        115,
        116,
        117,
        118,
        119,
        120,
        121,
        122,
        123,
        124,
        125,
        126,
        0,
        8226,
        8224,
        8225,
        8230,
        8212,
        8211,
        402,
        8260,
        8249,
        8250,
        8722,
        8240,
        8222,
        8220,
        8221,
        8216,
        8217,
        8218,
        8482,
        64257,
        64258,
        321,
        338,
        352,
        376,
        381,
        305,
        322,
        339,
        353,
        382,
        0,
        8364,
        161,
        162,
        163,
        164,
        165,
        166,
        167,
        168,
        169,
        170,
        171,
        172,
        0,
        174,
        175,
        176,
        177,
        178,
        179,
        180,
        181,
        182,
        183,
        184,
        185,
        186,
        187,
        188,
        189,
        190,
        191,
        192,
        193,
        194,
        195,
        196,
        197,
        198,
        199,
        200,
        201,
        202,
        203,
        204,
        205,
        206,
        207,
        208,
        209,
        210,
        211,
        212,
        213,
        214,
        215,
        216,
        217,
        218,
        219,
        220,
        221,
        222,
        223,
        224,
        225,
        226,
        227,
        228,
        229,
        230,
        231,
        232,
        233,
        234,
        235,
        236,
        237,
        238,
        239,
        240,
        241,
        242,
        243,
        244,
        245,
        246,
        247,
        248,
        249,
        250,
        251,
        252,
        253,
        254,
        255,
    )
)

def decode_text(s):
    """Decodes a PDFDocEncoding string to Unicode."""
    ...

def enc(x):
    """Encodes a string for SGML/XML/HTML"""
    ...

def bbox2str(bbox): ...
def matrix2str(m): ...
def vecBetweenBoxes(obj1, obj2):
    """A distance function between two TextBoxes.

    Consider the bounding rectangle for obj1 and obj2.
    Return vector between 2 boxes boundaries if they don't overlap, otherwise
    returns vector betweeen boxes centers

             +------+..........+ (x1, y1)
             | obj1 |          :
             +------+www+------+
             :          | obj2 |
    (x0, y0) +..........+------+
    """
    ...

class Plane:
    """A set-like data structure for objects placed on a plane.

    Can efficiently find objects in a certain rectangular area.
    It maintains two parallel lists of objects, each of
    which is sorted by its x or y coordinate.
    """

    def __init__(self, bbox, gridsize=...) -> None: ...
    def __repr__(self): ...
    def __iter__(self): ...
    def __len__(self): ...
    def __contains__(self, obj): ...
    def extend(self, objs): ...
    def add(self, obj):
        """place an object."""
        ...
    def remove(self, obj):
        """displace an object."""
        ...
    def find(self, bbox):
        """finds objects that are in a certain area."""
        ...
