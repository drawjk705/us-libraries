"""
This type stub file was generated by pyright.
"""

import logging

from .psparser import LIT, PSException, PSObject

log = logging.getLogger(__name__)
LITERAL_CRYPT = LIT("Crypt")
LITERALS_FLATE_DECODE = (LIT("FlateDecode"), LIT("Fl"))
LITERALS_LZW_DECODE = (LIT("LZWDecode"), LIT("LZW"))
LITERALS_ASCII85_DECODE = (LIT("ASCII85Decode"), LIT("A85"))
LITERALS_ASCIIHEX_DECODE = (LIT("ASCIIHexDecode"), LIT("AHx"))
LITERALS_RUNLENGTH_DECODE = (LIT("RunLengthDecode"), LIT("RL"))
LITERALS_CCITTFAX_DECODE = (LIT("CCITTFaxDecode"), LIT("CCF"))
LITERALS_DCT_DECODE = (LIT("DCTDecode"), LIT("DCT"))
LITERALS_JBIG2_DECODE = (LIT("JBIG2Decode"),)

class PDFObject(PSObject): ...
class PDFException(PSException): ...
class PDFTypeError(PDFException): ...
class PDFValueError(PDFException): ...
class PDFObjectNotFound(PDFException): ...
class PDFNotImplementedError(PDFException): ...

class PDFObjRef(PDFObject):
    def __init__(self, doc, objid, _) -> None: ...
    def __repr__(self): ...
    def resolve(self, default=...): ...

def resolve1(x, default=...):
    """Resolves an object.

    If this is an array or dictionary, it may still contains
    some indirect objects inside.
    """
    ...

def resolve_all(x, default=...):
    """Recursively resolves the given object and all the internals.

    Make sure there is no indirect reference within the nested object.
    This procedure might be slow.
    """
    ...

def decipher_all(decipher, objid, genno, x):
    """Recursively deciphers the given object."""
    ...

def int_value(x): ...
def float_value(x): ...
def num_value(x): ...
def uint_value(x, n_bits):
    """Resolve number and interpret it as a two's-complement unsigned number"""
    ...

def str_value(x): ...
def list_value(x): ...
def dict_value(x): ...
def stream_value(x): ...

class PDFStream(PDFObject):
    def __init__(self, attrs, rawdata, decipher=...) -> None: ...
    def set_objid(self, objid, genno): ...
    def __repr__(self): ...
    def __contains__(self, name): ...
    def __getitem__(self, name): ...
    def get(self, name, default=...): ...
    def get_any(self, names, default=...): ...
    def get_filters(self): ...
    def decode(self): ...
    def get_data(self): ...
    def get_rawdata(self): ...
