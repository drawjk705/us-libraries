"""
This type stub file was generated by pyright.
"""

import logging

from .pdftypes import PDFException
from .psparser import LIT, PSStackParser

log = logging.getLogger(__name__)
class PDFResourceError(PDFException):
    ...


class PDFInterpreterError(PDFException):
    ...


LITERAL_PDF = LIT('PDF')
LITERAL_TEXT = LIT('Text')
LITERAL_FONT = LIT('Font')
LITERAL_FORM = LIT('Form')
LITERAL_IMAGE = LIT('Image')
class PDFTextState:
    def __init__(self) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def copy(self):
        ...
    
    def reset(self):
        ...
    


class PDFGraphicState:
    def __init__(self) -> None:
        ...
    
    def copy(self):
        ...
    
    def __repr__(self):
        ...
    


class PDFResourceManager:
    """Repository of shared resources.

    ResourceManager facilitates reuse of shared resources
    such as fonts and images so that large objects are not
    allocated multiple times.
    """
    def __init__(self, caching=...) -> None:
        ...
    
    def get_procset(self, procs):
        ...
    
    def get_cmap(self, cmapname, strict=...):
        ...
    
    def get_font(self, objid, spec):
        ...
    


class PDFContentParser(PSStackParser):
    def __init__(self, streams) -> None:
        ...
    
    def fillfp(self):
        ...
    
    def seek(self, pos):
        ...
    
    def fillbuf(self):
        ...
    
    def get_inline_data(self, pos, target=...):
        ...
    
    def flush(self):
        ...
    
    KEYWORD_BI = ...
    KEYWORD_ID = ...
    KEYWORD_EI = ...
    def do_keyword(self, pos, token):
        ...
    


class PDFPageInterpreter:
    """Processor for the content of a PDF page

    Reference: PDF Reference, Appendix A, Operator Summary
    """
    def __init__(self, rsrcmgr, device) -> None:
        ...
    
    def dup(self):
        ...
    
    def init_resources(self, resources):
        """Prepare the fonts and XObjects listed in the Resource attribute."""
        ...
    
    def init_state(self, ctm):
        """Initialize the text and graphic states for rendering a page."""
        ...
    
    def push(self, obj):
        ...
    
    def pop(self, n):
        ...
    
    def get_current_state(self):
        ...
    
    def set_current_state(self, state):
        ...
    
    def do_q(self):
        """Save graphics state"""
        ...
    
    def do_Q(self):
        """Restore graphics state"""
        ...
    
    def do_cm(self, a1, b1, c1, d1, e1, f1):
        """Concatenate matrix to current transformation matrix"""
        ...
    
    def do_w(self, linewidth):
        """Set line width"""
        ...
    
    def do_J(self, linecap):
        """Set line cap style"""
        ...
    
    def do_j(self, linejoin):
        """Set line join style"""
        ...
    
    def do_M(self, miterlimit):
        """Set miter limit"""
        ...
    
    def do_d(self, dash, phase):
        """Set line dash pattern"""
        ...
    
    def do_ri(self, intent):
        """Set color rendering intent"""
        ...
    
    def do_i(self, flatness):
        """Set flatness tolerance"""
        ...
    
    def do_gs(self, name):
        """Set parameters from graphics state parameter dictionary"""
        ...
    
    def do_m(self, x, y):
        """Begin new subpath"""
        ...
    
    def do_l(self, x, y):
        """Append straight line segment to path"""
        ...
    
    def do_c(self, x1, y1, x2, y2, x3, y3):
        """Append curved segment to path (three control points)"""
        ...
    
    def do_v(self, x2, y2, x3, y3):
        """Append curved segment to path (initial point replicated)"""
        ...
    
    def do_y(self, x1, y1, x3, y3):
        """Append curved segment to path (final point replicated)"""
        ...
    
    def do_h(self):
        """Close subpath"""
        ...
    
    def do_re(self, x, y, w, h):
        """Append rectangle to path"""
        ...
    
    def do_S(self):
        """Stroke path"""
        ...
    
    def do_s(self):
        """Close and stroke path"""
        ...
    
    def do_f(self):
        """Fill path using nonzero winding number rule"""
        ...
    
    def do_F(self):
        """Fill path using nonzero winding number rule (obsolete)"""
        ...
    
    def do_f_a(self):
        """Fill path using even-odd rule"""
        ...
    
    def do_B(self):
        """Fill and stroke path using nonzero winding number rule"""
        ...
    
    def do_B_a(self):
        """Fill and stroke path using even-odd rule"""
        ...
    
    def do_b(self):
        """Close, fill, and stroke path using nonzero winding number rule"""
        ...
    
    def do_b_a(self):
        """Close, fill, and stroke path using even-odd rule"""
        ...
    
    def do_n(self):
        """End path without filling or stroking"""
        ...
    
    def do_W(self):
        """Set clipping path using nonzero winding number rule"""
        ...
    
    def do_W_a(self):
        """Set clipping path using even-odd rule"""
        ...
    
    def do_CS(self, name):
        """Set color space for stroking operations

        Introduced in PDF 1.1
        """
        ...
    
    def do_cs(self, name):
        """Set color space for nonstroking operations"""
        ...
    
    def do_G(self, gray):
        """Set gray level for stroking operations"""
        ...
    
    def do_g(self, gray):
        """Set gray level for nonstroking operations"""
        ...
    
    def do_RG(self, r, g, b):
        """Set RGB color for stroking operations"""
        ...
    
    def do_rg(self, r, g, b):
        """Set RGB color for nonstroking operations"""
        ...
    
    def do_K(self, c, m, y, k):
        """Set CMYK color for stroking operations"""
        ...
    
    def do_k(self, c, m, y, k):
        """Set CMYK color for nonstroking operations"""
        ...
    
    def do_SCN(self):
        """Set color for stroking operations."""
        ...
    
    def do_scn(self):
        """Set color for nonstroking operations"""
        ...
    
    def do_SC(self):
        """Set color for stroking operations"""
        ...
    
    def do_sc(self):
        """Set color for nonstroking operations"""
        ...
    
    def do_sh(self, name):
        """Paint area defined by shading pattern"""
        ...
    
    def do_BT(self):
        """Begin text object

        Initializing the text matrix, Tm, and the text line matrix, Tlm, to
        the identity matrix. Text objects cannot be nested; a second BT cannot
        appear before an ET.
        """
        ...
    
    def do_ET(self):
        """End a text object"""
        ...
    
    def do_BX(self):
        """Begin compatibility section"""
        ...
    
    def do_EX(self):
        """End compatibility section"""
        ...
    
    def do_MP(self, tag):
        """Define marked-content point"""
        ...
    
    def do_DP(self, tag, props):
        """Define marked-content point with property list"""
        ...
    
    def do_BMC(self, tag):
        """Begin marked-content sequence"""
        ...
    
    def do_BDC(self, tag, props):
        """Begin marked-content sequence with property list"""
        ...
    
    def do_EMC(self):
        """End marked-content sequence"""
        ...
    
    def do_Tc(self, space):
        """Set character spacing.

        Character spacing is used by the Tj, TJ, and ' operators.

        :param space: a number expressed in unscaled text space units.
        """
        ...
    
    def do_Tw(self, space):
        """Set the word spacing.

        Word spacing is used by the Tj, TJ, and ' operators.

        :param space: a number expressed in unscaled text space units
        """
        ...
    
    def do_Tz(self, scale):
        """Set the horizontal scaling.

        :param scale: is a number specifying the percentage of the normal width
        """
        ...
    
    def do_TL(self, leading):
        """Set the text leading.

        Text leading is used only by the T*, ', and " operators.

        :param leading: a number expressed in unscaled text space units
        """
        ...
    
    def do_Tf(self, fontid, fontsize):
        """Set the text font

        :param fontid: the name of a font resource in the Font subdictionary
            of the current resource dictionary
        :param fontsize: size is a number representing a scale factor.
        """
        ...
    
    def do_Tr(self, render):
        """Set the text rendering mode"""
        ...
    
    def do_Ts(self, rise):
        """Set the text rise

        :param rise: a number expressed in unscaled text space units
        """
        ...
    
    def do_Td(self, tx, ty):
        """Move text position"""
        ...
    
    def do_TD(self, tx, ty):
        """Move text position and set leading"""
        ...
    
    def do_Tm(self, a, b, c, d, e, f):
        """Set text matrix and text line matrix"""
        ...
    
    def do_T_a(self):
        """Move to start of next text line"""
        ...
    
    def do_TJ(self, seq):
        """Show text, allowing individual glyph positioning"""
        ...
    
    def do_Tj(self, s):
        """Show text"""
        ...
    
    def do__q(self, s):
        """Move to next line and show text

        The ' (single quote) operator.
        """
        ...
    
    def do__w(self, aw, ac, s):
        """Set word and character spacing, move to next line, and show text

        The " (double quote) operator.
        """
        ...
    
    def do_BI(self):
        """Begin inline image object"""
        ...
    
    def do_ID(self):
        """Begin inline image data"""
        ...
    
    def do_EI(self, obj):
        """End inline image object"""
        ...
    
    def do_Do(self, xobjid):
        """Invoke named XObject"""
        ...
    
    def process_page(self, page):
        ...
    
    def render_contents(self, resources, streams, ctm=...):
        """Render the content streams.

        This method may be called recursively.
        """
        ...
    
    def execute(self, streams):
        ...
    


