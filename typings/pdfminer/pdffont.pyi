"""
This type stub file was generated by pyright.
"""

import logging

from .pdftypes import PDFException
from .psparser import LIT, PSStackParser

log = logging.getLogger(__name__)
def get_widths(seq):
    ...

def get_widths2(seq):
    ...

class FontMetricsDB:
    @classmethod
    def get_metrics(cls, fontname):
        ...
    


class Type1FontHeaderParser(PSStackParser):
    KEYWORD_BEGIN = ...
    KEYWORD_END = ...
    KEYWORD_DEF = ...
    KEYWORD_PUT = ...
    KEYWORD_DICT = ...
    KEYWORD_ARRAY = ...
    KEYWORD_READONLY = ...
    KEYWORD_FOR = ...
    def __init__(self, data) -> None:
        ...
    
    def get_encoding(self):
        """Parse the font encoding.

        The Type1 font encoding maps character codes to character names. These
        character names could either be standard Adobe glyph names, or
        character names associated with custom CharStrings for this font. A
        CharString is a sequence of operations that describe how the character
        should be drawn. Currently, this function returns '' (empty string)
        for character names that are associated with a CharStrings.

        Reference: Adobe Systems Incorporated, Adobe Type 1 Font Format

        :returns mapping of character identifiers (cid's) to unicode characters
        """
        ...
    
    def do_keyword(self, pos, token):
        ...
    


NIBBLES = ('0', '1', '2', '3', '4', '5', '6', '7', '8', '9', '.', 'e', 'e-', None, '-')
IDENTITY_ENCODER = { 'DLIdent-H': 'Identity-H','DLIdent-V': 'Identity-V' }
def getdict(data):
    ...

class CFFFont:
    STANDARD_STRINGS = ...
    class INDEX:
        def __init__(self, fp) -> None:
            ...
        
        def __repr__(self):
            ...
        
        def __len__(self):
            ...
        
        def __getitem__(self, i):
            ...
        
        def __iter__(self):
            ...
        
    
    
    def __init__(self, name, fp) -> None:
        ...
    
    def getstr(self, sid):
        ...
    


class TrueTypeFont:
    class CMapNotFound(Exception):
        ...
    
    
    def __init__(self, name, fp) -> None:
        ...
    
    def create_unicode_map(self):
        ...
    


class PDFFontError(PDFException):
    ...


class PDFUnicodeNotDefined(PDFFontError):
    ...


LITERAL_STANDARD_ENCODING = LIT('StandardEncoding')
LITERAL_TYPE1C = LIT('Type1C')
class PDFFont:
    def __init__(self, descriptor, widths, default_width=...) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def is_vertical(self):
        ...
    
    def is_multibyte(self):
        ...
    
    def decode(self, bytes):
        ...
    
    def get_ascent(self):
        """Ascent above the baseline, in text space units"""
        ...
    
    def get_descent(self):
        """Descent below the baseline, in text space units; always negative"""
        ...
    
    def get_width(self):
        ...
    
    def get_height(self):
        ...
    
    def char_width(self, cid):
        ...
    
    def char_disp(self, cid):
        ...
    
    def string_width(self, s):
        ...
    


class PDFSimpleFont(PDFFont):
    def __init__(self, descriptor, widths, spec) -> None:
        ...
    
    def to_unichr(self, cid):
        ...
    


class PDFType1Font(PDFSimpleFont):
    def __init__(self, rsrcmgr, spec) -> None:
        ...
    
    def __repr__(self):
        ...
    


class PDFTrueTypeFont(PDFType1Font):
    def __repr__(self):
        ...
    


class PDFType3Font(PDFSimpleFont):
    def __init__(self, rsrcmgr, spec) -> None:
        ...
    
    def __repr__(self):
        ...
    


class PDFCIDFont(PDFFont):
    def __init__(self, rsrcmgr, spec, strict=...) -> None:
        ...
    
    def get_cmap_from_spec(self, spec, strict):
        """Get cmap from font specification

        For certain PDFs, Encoding Type isn't mentioned as an attribute of
        Encoding but as an attribute of CMapName, where CMapName is an
        attribute of spec['Encoding'].
        The horizontal/vertical modes are mentioned with different name
        such as 'DLIdent-H/V','OneByteIdentityH/V','Identity-H/V'.
        """
        ...
    
    def __repr__(self):
        ...
    
    def is_vertical(self):
        ...
    
    def is_multibyte(self):
        ...
    
    def decode(self, bytes):
        ...
    
    def char_disp(self, cid):
        "Returns an integer for horizontal fonts, a tuple for vertical fonts."
        ...
    
    def to_unichr(self, cid):
        ...
    


def main(argv):
    ...

if __name__ == '__main__':
    ...
