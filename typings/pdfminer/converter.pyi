"""
This type stub file was generated by pyright.
"""

import logging
from .pdfdevice import PDFTextDevice

log = logging.getLogger(__name__)
class PDFLayoutAnalyzer(PDFTextDevice):
    def __init__(self, rsrcmgr, pageno=..., laparams=...) -> None:
        ...
    
    def begin_page(self, page, ctm):
        ...
    
    def end_page(self, page):
        ...
    
    def begin_figure(self, name, bbox, matrix):
        ...
    
    def end_figure(self, _):
        ...
    
    def render_image(self, name, stream):
        ...
    
    def paint_path(self, gstate, stroke, fill, evenodd, path):
        """Paint paths described in section 4.4 of the PDF reference manual"""
        ...
    
    def render_char(self, matrix, font, fontsize, scaling, rise, cid, ncs, graphicstate):
        ...
    
    def handle_undefined_char(self, font, cid):
        ...
    
    def receive_layout(self, ltpage):
        ...
    


class PDFPageAggregator(PDFLayoutAnalyzer):
    def __init__(self, rsrcmgr, pageno=..., laparams=...) -> None:
        ...
    
    def receive_layout(self, ltpage):
        ...
    
    def get_result(self):
        ...
    


class PDFConverter(PDFLayoutAnalyzer):
    def __init__(self, rsrcmgr, outfp, codec=..., pageno=..., laparams=...) -> None:
        ...
    


class TextConverter(PDFConverter):
    def __init__(self, rsrcmgr, outfp, codec=..., pageno=..., laparams=..., showpageno=..., imagewriter=...) -> None:
        ...
    
    def write_text(self, text):
        ...
    
    def receive_layout(self, ltpage):
        ...
    
    def render_image(self, name, stream):
        ...
    
    def paint_path(self, gstate, stroke, fill, evenodd, path):
        ...
    


class HTMLConverter(PDFConverter):
    RECT_COLORS = ...
    TEXT_COLORS = ...
    def __init__(self, rsrcmgr, outfp, codec=..., pageno=..., laparams=..., scale=..., fontscale=..., layoutmode=..., showpageno=..., pagemargin=..., imagewriter=..., debug=..., rect_colors=..., text_colors=...) -> None:
        ...
    
    def write(self, text):
        ...
    
    def write_header(self):
        ...
    
    def write_footer(self):
        ...
    
    def write_text(self, text):
        ...
    
    def place_rect(self, color, borderwidth, x, y, w, h):
        ...
    
    def place_border(self, color, borderwidth, item):
        ...
    
    def place_image(self, item, borderwidth, x, y, w, h):
        ...
    
    def place_text(self, color, text, x, y, size):
        ...
    
    def begin_div(self, color, borderwidth, x, y, w, h, writing_mode=...):
        ...
    
    def end_div(self, color):
        ...
    
    def put_text(self, text, fontname, fontsize):
        ...
    
    def put_newline(self):
        ...
    
    def receive_layout(self, ltpage):
        ...
    
    def close(self):
        ...
    


class XMLConverter(PDFConverter):
    CONTROL = ...
    def __init__(self, rsrcmgr, outfp, codec=..., pageno=..., laparams=..., imagewriter=..., stripcontrol=...) -> None:
        ...
    
    def write(self, text):
        ...
    
    def write_header(self):
        ...
    
    def write_footer(self):
        ...
    
    def write_text(self, text):
        ...
    
    def receive_layout(self, ltpage):
        ...
    
    def close(self):
        ...
    


