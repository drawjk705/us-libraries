"""
This type stub file was generated by pyright.
"""

import logging

from .pdfparser import PDFSyntaxError
from .pdftypes import PDFException
from .psparser import LIT

log = logging.getLogger(__name__)
class PDFNoValidXRef(PDFSyntaxError):
    ...


class PDFNoValidXRefWarning(SyntaxWarning):
    ...


class PDFNoOutlines(PDFException):
    ...


class PDFDestinationNotFound(PDFException):
    ...


class PDFEncryptionError(PDFException):
    ...


class PDFPasswordIncorrect(PDFEncryptionError):
    ...


class PDFTextExtractionNotAllowedWarning(UserWarning):
    ...


class PDFTextExtractionNotAllowed(PDFEncryptionError):
    ...


class PDFTextExtractionNotAllowedError(PDFTextExtractionNotAllowed):
    def __init__(self, *args) -> None:
        ...
    


LITERAL_OBJSTM = LIT('ObjStm')
LITERAL_XREF = LIT('XRef')
LITERAL_CATALOG = LIT('Catalog')
class PDFBaseXRef:
    def get_trailer(self):
        ...
    
    def get_objids(self):
        ...
    
    def get_pos(self, objid):
        ...
    


class PDFXRef(PDFBaseXRef):
    def __init__(self) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def load(self, parser):
        ...
    
    def load_trailer(self, parser):
        ...
    
    def get_trailer(self):
        ...
    
    def get_objids(self):
        ...
    
    def get_pos(self, objid):
        ...
    


class PDFXRefFallback(PDFXRef):
    def __repr__(self):
        ...
    
    PDFOBJ_CUE = ...
    def load(self, parser):
        ...
    


class PDFXRefStream(PDFBaseXRef):
    def __init__(self) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def load(self, parser):
        ...
    
    def get_trailer(self):
        ...
    
    def get_objids(self):
        ...
    
    def get_pos(self, objid):
        ...
    


class PDFStandardSecurityHandler:
    PASSWORD_PADDING = ...
    supported_revisions = ...
    def __init__(self, docid, param, password=...) -> None:
        ...
    
    def init(self):
        ...
    
    def init_params(self):
        ...
    
    def init_key(self):
        ...
    
    def is_printable(self):
        ...
    
    def is_modifiable(self):
        ...
    
    def is_extractable(self):
        ...
    
    def compute_u(self, key):
        ...
    
    def compute_encryption_key(self, password):
        ...
    
    def authenticate(self, password):
        ...
    
    def authenticate_user_password(self, password):
        ...
    
    def verify_encryption_key(self, key):
        ...
    
    def authenticate_owner_password(self, password):
        ...
    
    def decrypt(self, objid, genno, data, attrs=...):
        ...
    
    def decrypt_rc4(self, objid, genno, data):
        ...
    


class PDFStandardSecurityHandlerV4(PDFStandardSecurityHandler):
    supported_revisions = ...
    def init_params(self):
        ...
    
    def get_cfm(self, name):
        ...
    
    def decrypt(self, objid, genno, data, attrs=..., name=...):
        ...
    
    def decrypt_identity(self, objid, genno, data):
        ...
    
    def decrypt_aes128(self, objid, genno, data):
        ...
    


class PDFStandardSecurityHandlerV5(PDFStandardSecurityHandlerV4):
    supported_revisions = ...
    def init_params(self):
        ...
    
    def get_cfm(self, name):
        ...
    
    def authenticate(self, password):
        ...
    
    def decrypt_aes256(self, objid, genno, data):
        ...
    


class PDFDocument:
    """PDFDocument object represents a PDF document.

    Since a PDF file can be very big, normally it is not loaded at
    once. So PDF document has to cooperate with a PDF parser in order to
    dynamically import the data as processing goes.

    Typical usage:
      doc = PDFDocument(parser, password)
      obj = doc.getobj(objid)

    """
    security_handler_registry = ...
    def __init__(self, parser, password=..., caching=..., fallback=...) -> None:
        "Set the document to use a given PDFParser object."
        ...
    
    KEYWORD_OBJ = ...
    def getobj(self, objid):
        """Get object from PDF

        :raises PDFException if PDFDocument is not initialized
        :raises PDFObjectNotFound if objid does not exist in PDF
        """
        ...
    
    def get_outlines(self):
        ...
    
    def lookup_name(self, cat, key):
        ...
    
    def get_dest(self, name):
        ...
    
    def find_xref(self, parser):
        """Internal function used to locate the first XRef."""
        ...
    
    def read_xref_from(self, parser, start, xrefs):
        """Reads XRefs from the given location."""
        ...
    


