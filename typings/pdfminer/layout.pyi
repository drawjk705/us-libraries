"""
This type stub file was generated by pyright.
"""

import logging

"""
This type stub file was generated by pyright.
"""
logger = logging.getLogger(__name__)
class IndexAssigner:
    def __init__(self, index=...) -> None:
        ...
    
    def run(self, obj):
        ...
    


class LAParams:
    """Parameters for layout analysis

    :param line_overlap: If two characters have more overlap than this they
        are considered to be on the same line. The overlap is specified
        relative to the minimum height of both characters.
    :param char_margin: If two characters are closer together than this
        margin they are considered part of the same line. The margin is
        specified relative to the width of the character.
    :param word_margin: If two characters on the same line are further apart
        than this margin then they are considered to be two separate words, and
        an intermediate space will be added for readability. The margin is
        specified relative to the width of the character.
    :param line_margin: If two lines are are close together they are
        considered to be part of the same paragraph. The margin is
        specified relative to the height of a line.
    :param boxes_flow: Specifies how much a horizontal and vertical position
        of a text matters when determining the order of text boxes. The value
        should be within the range of -1.0 (only horizontal position
        matters) to +1.0 (only vertical position matters). You can also pass
        `None` to disable advanced layout analysis, and instead return text
        based on the position of the bottom left corner of the text box.
    :param detect_vertical: If vertical text should be considered during
        layout analysis
    :param all_texts: If layout analysis should be performed on text in
        figures.
    """
    def __init__(self, line_overlap=..., char_margin=..., line_margin=..., word_margin=..., boxes_flow=..., detect_vertical=..., all_texts=...) -> None:
        ...
    
    def __repr__(self):
        ...
    


class LTItem:
    """Interface for things that can be analyzed"""
    def analyze(self, laparams):
        """Perform the layout analysis."""
        ...
    


class LTText:
    """Interface for things that have text"""
    def __repr__(self):
        ...
    
    def get_text(self):
        """Text contained in this object"""
        ...
    


class LTComponent(LTItem):
    """Object with a bounding box"""
    def __init__(self, bbox) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def __lt__(self, _) -> bool:
        ...
    
    def __le__(self, _) -> bool:
        ...
    
    def __gt__(self, _) -> bool:
        ...
    
    def __ge__(self, _) -> bool:
        ...
    
    def set_bbox(self, bbox):
        ...
    
    def is_empty(self):
        ...
    
    def is_hoverlap(self, obj):
        ...
    
    def hdistance(self, obj):
        ...
    
    def hoverlap(self, obj):
        ...
    
    def is_voverlap(self, obj):
        ...
    
    def vdistance(self, obj):
        ...
    
    def voverlap(self, obj):
        ...
    


class LTCurve(LTComponent):
    """A generic Bezier curve"""
    def __init__(self, linewidth, pts, stroke=..., fill=..., evenodd=..., stroking_color=..., non_stroking_color=...) -> None:
        ...
    
    def get_pts(self):
        ...
    


class LTLine(LTCurve):
    """A single straight line.

    Could be used for separating text or figures.
    """
    def __init__(self, linewidth, p0, p1, stroke=..., fill=..., evenodd=..., stroking_color=..., non_stroking_color=...) -> None:
        ...
    


class LTRect(LTCurve):
    """A rectangle.

    Could be used for framing another pictures or figures.
    """
    def __init__(self, linewidth, bbox, stroke=..., fill=..., evenodd=..., stroking_color=..., non_stroking_color=...) -> None:
        ...
    


class LTImage(LTComponent):
    """An image object.

    Embedded images can be in JPEG, Bitmap or JBIG2.
    """
    def __init__(self, name, stream, bbox) -> None:
        ...
    
    def __repr__(self):
        ...
    


class LTAnno(LTItem, LTText):
    """Actual letter in the text as a Unicode string.

    Note that, while a LTChar object has actual boundaries, LTAnno objects does
    not, as these are "virtual" characters, inserted by a layout analyzer
    according to the relationship between two characters (e.g. a space).
    """
    def __init__(self, text) -> None:
        ...
    
    def get_text(self):
        ...
    


class LTChar(LTComponent, LTText):
    """Actual letter in the text as a Unicode string."""
    def __init__(self, matrix, font, fontsize, scaling, rise, text, textwidth, textdisp, ncs, graphicstate) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def get_text(self):
        ...
    
    def is_compatible(self, obj):
        """Returns True if two characters can coexist in the same line."""
        ...
    


class LTContainer(LTComponent):
    """Object that can be extended and analyzed"""
    def __init__(self, bbox) -> None:
        ...
    
    def __iter__(self):
        ...
    
    def __len__(self):
        ...
    
    def add(self, obj):
        ...
    
    def extend(self, objs):
        ...
    
    def analyze(self, laparams):
        ...
    


class LTExpandableContainer(LTContainer):
    def __init__(self) -> None:
        ...
    
    def add(self, obj):
        ...
    


class LTTextContainer(LTExpandableContainer, LTText):
    def __init__(self) -> None:
        ...
    
    def get_text(self):
        ...
    


class LTTextLine(LTTextContainer):
    """Contains a list of LTChar objects that represent a single text line.

    The characters are aligned either horizontally or vertically, depending on
    the text's writing mode.
    """
    def __init__(self, word_margin) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def analyze(self, laparams):
        ...
    
    def find_neighbors(self, plane, ratio):
        ...
    


class LTTextLineHorizontal(LTTextLine):
    def __init__(self, word_margin) -> None:
        ...
    
    def add(self, obj):
        ...
    
    def find_neighbors(self, plane, ratio):
        """
        Finds neighboring LTTextLineHorizontals in the plane.

        Returns a list of other LTTestLineHorizontals in the plane which are
        close to self. "Close" can be controlled by ratio. The returned objects
        will be the same height as self, and also either left-, right-, or
        centrally-aligned.
        """
        ...
    


class LTTextLineVertical(LTTextLine):
    def __init__(self, word_margin) -> None:
        ...
    
    def add(self, obj):
        ...
    
    def find_neighbors(self, plane, ratio):
        """
        Finds neighboring LTTextLineVerticals in the plane.

        Returns a list of other LTTextLineVerticals in the plane which are
        close to self. "Close" can be controlled by ratio. The returned objects
        will be the same width as self, and also either upper-, lower-, or
        centrally-aligned.
        """
        ...
    


class LTTextBox(LTTextContainer):
    """Represents a group of text chunks in a rectangular area.

    Note that this box is created by geometric analysis and does not
    necessarily represents a logical boundary of the text. It contains a list
    of LTTextLine objects.
    """
    def __init__(self) -> None:
        ...
    
    def __repr__(self):
        ...
    


class LTTextBoxHorizontal(LTTextBox):
    def analyze(self, laparams):
        ...
    
    def get_writing_mode(self):
        ...
    


class LTTextBoxVertical(LTTextBox):
    def analyze(self, laparams):
        ...
    
    def get_writing_mode(self):
        ...
    


class LTTextGroup(LTTextContainer):
    def __init__(self, objs) -> None:
        ...
    


class LTTextGroupLRTB(LTTextGroup):
    def analyze(self, laparams):
        ...
    


class LTTextGroupTBRL(LTTextGroup):
    def analyze(self, laparams):
        ...
    


class LTLayoutContainer(LTContainer):
    def __init__(self, bbox) -> None:
        ...
    
    def group_objects(self, laparams, objs):
        ...
    
    def group_textlines(self, laparams, lines):
        """Group neighboring lines to textboxes"""
        ...
    
    def group_textboxes(self, laparams, boxes):
        """Group textboxes hierarchically.

        Get pair-wise distances, via dist func defined below, and then merge
        from the closest textbox pair. Once obj1 and obj2 are merged /
        grouped, the resulting group is considered as a new object, and its
        distances to other objects & groups are added to the process queue.

        For performance reason, pair-wise distances and object pair info are
        maintained in a heap of (idx, dist, id(obj1), id(obj2), obj1, obj2)
        tuples. It ensures quick access to the smallest element. Note that
        since comparison operators, e.g., __lt__, are disabled for
        LTComponent, id(obj) has to appear before obj in element tuples.

        :param laparams: LAParams object.
        :param boxes: All textbox objects to be grouped.
        :return: a list that has only one element, the final top level textbox.
        """
        ...
    
    def analyze(self, laparams):
        ...
    


class LTFigure(LTLayoutContainer):
    """Represents an area used by PDF Form objects.

    PDF Forms can be used to present figures or pictures by embedding yet
    another PDF document within a page. Note that LTFigure objects can appear
    recursively.
    """
    def __init__(self, name, bbox, matrix) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def analyze(self, laparams):
        ...
    


class LTPage(LTLayoutContainer):
    """Represents an entire page.

    May contain child objects like LTTextBox, LTFigure, LTImage, LTRect,
    LTCurve and LTLine.
    """
    def __init__(self, pageid, bbox, rotate=...) -> None:
        ...
    
    def __repr__(self):
        ...
    


