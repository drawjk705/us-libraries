"""
This type stub file was generated by pyright.
"""

class PDFDevice:
    """Translate the output of PDFPageInterpreter to the output that is needed
    """
    def __init__(self, rsrcmgr) -> None:
        ...
    
    def __repr__(self):
        ...
    
    def __enter__(self):
        ...
    
    def __exit__(self, exc_type, exc_val, exc_tb):
        ...
    
    def close(self):
        ...
    
    def set_ctm(self, ctm):
        ...
    
    def begin_tag(self, tag, props=...):
        ...
    
    def end_tag(self):
        ...
    
    def do_tag(self, tag, props=...):
        ...
    
    def begin_page(self, page, ctm):
        ...
    
    def end_page(self, page):
        ...
    
    def begin_figure(self, name, bbox, matrix):
        ...
    
    def end_figure(self, name):
        ...
    
    def paint_path(self, graphicstate, stroke, fill, evenodd, path):
        ...
    
    def render_image(self, name, stream):
        ...
    
    def render_string(self, textstate, seq, ncs, graphicstate):
        ...
    


class PDFTextDevice(PDFDevice):
    def render_string(self, textstate, seq, ncs, graphicstate):
        ...
    
    def render_string_horizontal(self, seq, matrix, pos, font, fontsize, scaling, charspace, wordspace, rise, dxscale, ncs, graphicstate):
        ...
    
    def render_string_vertical(self, seq, matrix, pos, font, fontsize, scaling, charspace, wordspace, rise, dxscale, ncs, graphicstate):
        ...
    
    def render_char(self, matrix, font, fontsize, scaling, rise, cid, ncs, graphicstate):
        ...
    


class TagExtractor(PDFDevice):
    def __init__(self, rsrcmgr, outfp, codec=...) -> None:
        ...
    
    def render_string(self, textstate, seq, ncs, graphicstate):
        ...
    
    def begin_page(self, page, ctm):
        ...
    
    def end_page(self, page):
        ...
    
    def begin_tag(self, tag, props=...):
        ...
    
    def end_tag(self):
        ...
    
    def do_tag(self, tag, props=...):
        ...
    


